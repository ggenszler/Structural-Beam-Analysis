% Grace Genszler
% SURE 2017
% Beam Deflection Computations

clear all
%% Parameter Input

% parameters
% uni=input('Input unit type \n 0 for metric \n 1 for imperial \n')
% if uni==0
%     units=10^3;
% else
%     units=1;
% end
% % this assumes loads will be entered in kN and kips
units = 10^3;
    
% E=input('Input modulus of elasticity \n');
% I=input('Input moment of inertia \n');
% l=input('Input length of beam \n');
E = 203*10^9;
I = 16270*10^-12;
l = 4;
lstep=.01;
L=0:lstep:l;

% supports
n=0;
supports=[];

% while n==0
%     loc=input('Input location of leftmost undefined support \n');
%     stype=input('Input support type \n 0 for fixed \n 1 for pinned \n 2 for roller \n');
%     supports=[supports;
%               stype    loc];
%     n=input('Enter another support? \n 0 for YES \n 1 for NO \n');
% end
supports = [0   0];

% loading
m=0;
load=[];

% while m==0
%     ltype=input('Input applied loading type \n 0 for moment \n 1 for force \n');
%     a=input('Input location of leftmost undefined loading \n');
%     p=input('Input value of leftmost undefined loading \n + for upwards and CCW \n - for downwards and CW \n');
%     dl=input('Input dl length \n enter zero (0) for applied moment or point load \n');
%     load=[load;
%           a    p    a+dl      ltype];
%     m=input('Enter another loading? \n 0 for YES \n 1 for NO \n');
% end
load = [3   -5     3   1];

%% Static Indeterminacy
deg_indet=indet(supports);

%% Solve Reaction Forces

if deg_indet==0
    rxns=statics(supports,load);
    %if determinate, reactions are solved
else
    [m1,n1]=size(supports);
    if supports(1,1)==0
        lsupports=[supports(1,1)    supports(1,2)];
    elseif supports(2,1)==0
        lsupports=[supports(2,1)    supports(2,2)];
    else
        lsupports=[supports(1,1)    supports(1,2);
                   supports(m1,1)   supports(m1,2)];
    end
    % eliminate redundancies, leaving only the fixed support or the two end
    % supports for a simply supported beam. First case is for cantilever
    % beams with the wall on the left. Second case is for cantilever beams
    % with the wall on the right. Third case is for simply supported beams.
    
    lrxns=statics(lsupports,load);
    % reactions for loaded case
    
    d_load=[];
      
     if supports(1,1)==0
         d=displacement(supports(2,2),lrxns,load,lsupports,l,E,I);
         d_load=[d_load     d];
     elseif supports(2,1)==0
         d=displacement(supports(1,2),lrxns,load,lsupports,l,E,I);
         d_load=[d_load     d];
     else
         for i=2:m1-1
            d=displacement(supports(i,2),lrxns,load,lsupports,l,E,I);
            d_load=[d_load  d];
         end
     end
    % compute deflections at the locations of the removed supports. First
    % case is for cantilever beams with the wall on the left. Second case
    % is for cantilever beams with the wall on the right. Third case is for
    % simply supported beams.

    if size(d_load,2)==1
        syms B
        rload=[supports(2,2)    B       supports(2,2)       1];
    else
        syms B C
        if supports(1,1)==0 && supports(2,1)==0
            rload=[supports(2,2)    B       supports(2,2)       1;
                   supports(2,2)    C       supports(2,2)       0];
        else
            rload=[supports(2,2)    B       supports(2,2)       1;
                   supports(3,2)    C       supports(3,2)       1];
        end
        % First case is for a beam between two fixed supports. Second case
        % is for one fixed support and one pin or roller support.
    end
    % create variables of the reaction forces generated by the removed
    % supports. First case is for one redundancy. Second case is for two
    % redundancies.
    
    rrxns=statics(lsupports,rload);
    %solves the reactions for the loaded case
    
    d_red=[];
    
    if supports(1,1)==0 && supports(2,1)~=0
        d=displacement(supports(2,2),rrxns,rload,lsupports,l,E,I);
        d_red=[d_red    d];
    elseif supports(2,1)==0 && supports(1,1)~=0
        d=displacement(supports(1,2),rrxns,rload,lsupports,l,E,I);
        d_red=[d_red    d];
    else
        for i=2:m1-1
            d=displacement(supports(i,2),rrxns,rload,lsupports,l,E,I);
            d_red=[d_red    d];
        end
    end
    % compute deflections at the locations of the redundants. First case is
    % for a cantilever beam with the fixed support on the left. Second case
    % is for a cantilever beam with the fixed support on the right. Third
    % case is for simply supported.
    
    if size(d_load,2)==1
        [By]=solve(d_red==-d_load, B);
        % solves the reaction force of the removed support
        if supports(2,1)==0
            load=[load;
                  supports(1,2)     By      supports(1,2)   1];
        else
            load=[load;
                  supports(2,2)     By      supports(2,2)   1];
        end
        % first case is for cantilever beams with the fixed support on the
        % right. Second case is for everything else.
    else
        [By, Cy]=solve(d_red==d_load, [B, C]);
        % solves the reaction forces of the removed support(s)
        if supports(1,1)==0 && supports(2,1)==0
            load=[load;
                  suports(2,2)      By      supports(2,2)   1;
                  supports(2,2)     Cy      supports(3,2)   0];
        else
            load=[load;
                  supports(2,2)     By      supports(2,2)   1;
                  supports(3,2)     Cy      supports(3,2)   1];
        end
        % first case is for a beam fixed at both ends. Second case is for
        % everything else
    end
    %reformats the array 'load,' adding a new entry that treats the
    %newly solved reaction force of the removed redundant as a point
    %load
    
    supports=lsupports;
    %rename the supports array since the redundant support has been
    %accounted for in the load array
    
    rxns=statics(supports,load);
    %solve for the remaining reactions
end

%% Shear and Moment

[v,m]=shearmoment(rxns,load,supports,l,lstep);

figure(1)
subplot(2,1,1)
plot(L, v)
xlabel('Distance Along Beam (m)', 'fontsize', 14')
ylabel('Shear (kN)', 'fontsize', 14)
title('Cantilever Beam', 'fontsize', 18)
ylim([-2, 12])
subplot(2,1,2)
plot(L, m)
xlabel('Distance Along Beam (m)', 'fontsize', 14)
ylabel('Moment (kN.m)', 'fontsize', 14)
ylim([-35, 3])

%% Displacement

r=0;

while r==0
    y=input('Input distance to calculate displacement \n');   
    d=displacement(y,rxns,load,supports,l,E,I,units);
    d = sprintf('%16.5f',d)
    r=input('Calculate another displacement? \n 0 for YES \n 1 for NO \n');
end